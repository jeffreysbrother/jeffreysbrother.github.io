<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>James Cool - Programming and Web Development</title>
    <description>programming and web development</description>
    <link>http://jeffreysbrother.github.io//</link>
    <atom:link href="http://jeffreysbrother.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 17 Nov 2015 20:22:54 -0800</pubDate>
    <lastBuildDate>Tue, 17 Nov 2015 20:22:54 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Programming Resources</title>
        <description>&lt;p&gt;Below is a list of online resources (both paid and free) that I have found to be particularly useful in learning web development and programming. I will try to keep this list up-to-date.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://teamtreehouse.com&quot;&gt;Treehouse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/learncodeacademy&quot;&gt;LearnCode.academy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.udemy.com/understand-javascript/&quot;&gt;JavaScript: Understanding the Weird Parts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot;&gt;You Don’t Know JS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.udemy.com/java-tutorial/&quot;&gt;Java Tutorial for Complete Beginners&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLpcSpRrAaOaqMA4RdhSnnNcaqOVpX7qi5&quot;&gt;WordPress Theme Development by LearnWebCode&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Nov 2015 00:00:00 -0800</pubDate>
        <link>http://jeffreysbrother.github.io//Programming-Resources</link>
        <guid isPermaLink="true">http://jeffreysbrother.github.io//Programming-Resources</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Atom Snippet Customization</title>
        <description>&lt;p&gt;The &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; text editor comes with a number of default snippets that are associated with (and activated by) &lt;a href=&quot;http://emmet.io/&quot;&gt;Emmet&lt;/a&gt;-like abbreviations. We can type an abbreviation, and then hit &lt;code&gt;TAB&lt;/code&gt; to expand that abbreviation into a pre-defined snippet of code. This is particularly useful in eliminating repetition.&lt;/p&gt;

&lt;p&gt;For example, if we type &lt;code&gt;html&lt;/code&gt; and then press &lt;code&gt;TAB&lt;/code&gt;, we’ll get this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An added bonus is that after generating this bit of code, the cursor is placed conveniently between the opening and closing title tags. If the user hits &lt;code&gt;TAB&lt;/code&gt; again, the cursor will jump to the body of the document. Every feature of this default action (the abbreviation, the content and formatting of the resulting snippet, and the result of hitting the &lt;code&gt;TAB&lt;/code&gt; key) can be customized in the snippets.cson file.&lt;/p&gt;

&lt;p&gt;To find this file, open Atom’s preferences and select “Open Config Folder”. In the file tree, open the snippets.cson file. Below the comments, if we type “snip” and then hit &lt;code&gt;TAB&lt;/code&gt;, an example snippet will be generated for us:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.source.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;Snippet Name&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;prefix&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Snippet Trigger&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first line specifies the language for which the snippet will be used (JavaScript in the above example). The next line serves as a human-readable name for the snippet. This, I believe, exists only for documentation purposes; if we provide a relevant name for this task, our code will be more readable. The ‘prefix’ refers to the (ideally short) abbreviation, and ‘body’ refers to the snippet that will be generated upon pressing &lt;code&gt;TAB&lt;/code&gt;. Here is an example of what the CSON block would look like if we were specifying the instructions for generating the HTML code in the first example above:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.text.html.basic&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;HTML&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;prefix&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;html&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;!DOCTYPE html&amp;gt;\n&amp;lt;html&amp;gt;\n\t&amp;lt;head&amp;gt;\n\t\t&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;\n\t\t&amp;lt;title&amp;gt;$1&amp;lt;/title&amp;gt;\n\t&amp;lt;/head&amp;gt;\n\t&amp;lt;body&amp;gt;\n\t\t$2\n\t&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that in the ‘body’ section, in addition to the plain HTML, we see escape sequences for newline characters and tabs. This is how we control the formatting of the snippet. We also see &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt;. With these special characters, we can tell Atom where to insert the cursor with every subsequent press of the &lt;code&gt;TAB&lt;/code&gt; key. &lt;code&gt;$1&lt;/code&gt; is placed where we’d like the cursor to appear after we first generate the snippet. &lt;code&gt;$2&lt;/code&gt; is placed where we’d like the cursor to move when we hit &lt;code&gt;TAB&lt;/code&gt; a second time.&lt;/p&gt;

&lt;p&gt;In order to determine the proper scope of the CSON block, we need to navigate to Atom preferences &amp;gt; packages, and then scroll down to the target language. If we click on “language-html”, under the HTML Grammar section, we’ll see that the value of the Scope variable is &lt;strong&gt;.text.html.basic&lt;/strong&gt;. If we forget to set the scope value in each CSON block, Atom will not know what the proper corresponding document type should be. If we’re creating a custom PHP snippet, for example, we need to specify a scope of &lt;strong&gt;.text.html.php&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, if Emmet is installed, it’s important to disable it. Otherwise, updates to the snippets.cson file will have no effect. I’m not completely sure why this is, but perhaps it’s because Emmet snippets override the snippets native to Atom.&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Oct 2015 00:00:00 -0700</pubDate>
        <link>http://jeffreysbrother.github.io//Atom-Snippet-Customization</link>
        <guid isPermaLink="true">http://jeffreysbrother.github.io//Atom-Snippet-Customization</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Treehouse and Self-Education</title>
        <description>&lt;p&gt;Of course, there is nothing preventing a person enrolled at some expensive university from participating in self-motivated education; an impediment caused by a professor can be overcome in a person’s free time, and the cost of some program does not determine the extent to which it deters or promotes learning. These things, I believe, should be fairly obvious.&lt;/p&gt;

&lt;p&gt;The feature of self-education that I find so efficacious is the simple fact that the student can &lt;em&gt;progress&lt;/em&gt; as quickly as his interest-level and abilities permit. The student who discovers a genuine interest isn’t forced to submit to the impediments of an academic calendar or a lesson plan. This is not to say that goals, rubrics, or a strict progression of material should be discarded (though it’s true that they often should). My point here is that the liberty associated with self-education frees the student from having to WAIT for the next module. Formal systems based on the “time-release” model (university, for example) encourage boredom and guarantee a great amount of inefficiency.&lt;/p&gt;

&lt;p&gt;I’ve been skeptical of multiple aspects of formal education for quite some time, but many of my suspicions became more clear when I started taking classes at &lt;a href=&quot;https://teamtreehouse.com/&quot;&gt;Treehouse&lt;/a&gt;. Besides being amazed at how interested I was in the subject matter and at how quickly I was able to progress, another beneficial outcome of self-guided education in general (and Treehouse’s service in particular) is the fact that the student, when overcome with boredom, can &lt;em&gt;abandon&lt;/em&gt; the topic upon which he is currently focused and begin work elsewhere &lt;strong&gt;with no penalty whatsoever&lt;/strong&gt;. If he suddenly realizes, for example, that PHP induces depression or (more subjectively) that a particular instructor isn’t very effective, there’s absolutely nothing preventing him from learning something else instead. To assume that the quintessential “good student” is a compliant, unquestioning, emotionless blob who ought to find every topic to be equally interesting is very, very twisted and false.&lt;/p&gt;

&lt;p&gt;A person might object to the claim that participating in a service like Treehouse amounts to self-education. Why not consider it to be a variation of an online course offered by some university? I admit that my terminology and outlook might depart from contemporary philosophy of education; this is not something I claim to have studied and I know nothing about the actual “success rates” of competing models. All I’m suggesting is that certain individuals (individuals like myself) will likely benefit from the freedom to progress as quickly as he can and from the freedom to abandon some track—if he wishes—without penalty. These two elements alone are enough, I think, to distinguish Treehouse from university courses (even those taken partially or completely online). If these differences are admitted, then the terminological issues become non-issues and the benefits become clear.&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Oct 2015 00:00:00 -0700</pubDate>
        <link>http://jeffreysbrother.github.io//treehouse-education</link>
        <guid isPermaLink="true">http://jeffreysbrother.github.io//treehouse-education</guid>
        
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>
